# Hackathon Winning Plan: Automated Factory Farm Objection Generator (AFOG)

## 🧠 Objective

Build a minimal, clear, and impactful MVP that:
*   Detects factory farm permit filings (mocked for demo).
*   Uses AI (Gemini API) to generate objection letters citing Indian regulations.
*   Sends downloadable letters + email alerts.

## ⏱️ Detailed Timeline (1-Day Hackathon, 8-Hour Version)

### ✅ Hour 1: Setup & Kickoff (Team Lead / All)
*   **Task:** Confirm `Hackathon` directory contains `AFOG_Project/backend/` and `frontend/` subdirectories.
*   **Task:** Ensure `README.md` and `plan.txt` are in the `Hackathon` root.
*   **Task:** Prepare mock `AFOG_Project/backend/permits.json` (3–5 sample permits).
*   **Task:** Agree on 2 Indian laws to reference for AI prompts:
    *   Environment Protection Act, 1986
    *   Prevention of Cruelty to Animals Act, 1960

### ✅ Hour 2-3: Backend & AI Core (Backend Dev / AI Prompt Engineer)
*   **Backend Dev Task:** Implement Flask API endpoint `/detect_permits` in `AFOG_Project/backend/app.py` to read from `permits.json`. This endpoint will provide the frontend with mock permit data.
*   **Backend Dev Task:** Implement Flask API endpoint `/generate_letter` in `AFOG_Project/backend/app.py`. Initially, this can return a placeholder string. This endpoint will eventually call the Gemini API.
*   **AI Prompt Engineer Task:** Start drafting 2-3 robust prompt templates for Gemini API based on farm type and legal references. Focus on making them clear and effective for generating persuasive letters.
    *   **Prompt Example:** "Write a formal objection letter to a poultry factory farm permit in Maharashtra, referencing the Environment Protection Act (1986) and animal cruelty concerns under the PCA Act (1960)."
*   **Backend Dev Task:** Add `Flask` and `google-generativeai` to `AFOG_Project/backend/requirements.txt`.
*   **Running Backend (for testing):** After setup, you can run the backend by navigating to `AFOG_Project/backend` and executing `python app.py`.

### ✅ Hour 4: Frontend UI Development (Frontend Dev)
*   **Frontend Dev Task:** The Next.js project is already initialized in the `frontend/` directory.
*   **Frontend Dev Task:** Develop the main UI in `frontend/pages/index.js`. This includes:
    *   A dropdown/list to display permits fetched from the backend.
    *   Input fields for user name and email.
    *   A button to trigger the letter generation process.
*   **Frontend Dev Task:** Utilize Tailwind CSS for styling by importing `globals.css` and applying utility classes.
*   **Running Frontend (for testing):** After setup, you can run the frontend by navigating to `frontend` and executing `npm run dev` (or `yarn dev`).

### ✅ Hour 5: Frontend-Backend Integration & Email Mock (Frontend Dev / Backend Dev)
*   **Frontend Dev Task:** Implement API calls from `frontend/pages/index.js` (or a dedicated API utility) to:
    *   Fetch permits from the backend's `/detect_permits` endpoint (`http://127.0.0.1:5000/detect_permits`).
    *   Send user input (selected permit, name, email) to the backend's `/generate_letter` endpoint (`http://127.0.0.1:5000/generate_letter`).
    *   Display the generated letter content (or placeholder) in the frontend UI.
*   **Backend Dev Task:** Refine the mock email alert in `AFOG_Project/backend/app.py` to print a clear, formatted email content to the console when a letter is generated.

### ✅ Hour 6: Polish & Add Bonus Features (All)
*   🎯 **Bonus:** Implement a “Quick Object” Button in the frontend that auto-fills data and directly triggers letter download.
*   🧠 **Bonus:** Add an "Explain this letter" tooltip for users, providing context for legal terms or AI-generated arguments.
*   📘 **Bonus:** Ensure the generated letter footer clearly cites the 2 legal clauses agreed upon in Hour 1.
*   **All:** Refine UI/UX using Tailwind CSS, add header, footer, and simple icons for a polished look.

### ✅ Hour 7: Full Testing & Feedback (All / Presenter/Tester)
*   **All:** Conduct comprehensive end-to-end testing: from permit display to letter generation and email/download functionality.
*   **Presenter/Tester:** Test the application on different browsers and mobile devices to ensure responsiveness.
*   **Presenter/Tester:** Seek feedback from mentors or another team to identify areas for improvement.

### ✅ Hour 8: Final Polish & Pitch Prep (Presenter/Tester / All)
*   **Presenter/Tester:** Prepare a concise 2-minute demo script highlighting the core flow: “We detect… we draft… you act.”
*   **Presenter/Tester:** Craft a powerful one-liner for the pitch: **“We help communities say NO to unethical farms, instantly.”**
*   **All:** Perform final UI polish and ensure all components are working seamlessly.

## 🎯 Deliverables (Slimmed & Solid)

*   🔎 Permit Detector: Reads permits from JSON file.
*   📝 Objection Letter Generator: AI-based letter citing Indian laws.
*   📩 Email Alert System: Alert with link to object (mock or real).
*   🌐 Web Interface: User inputs, views permit, downloads letter.
*   📄 Bonus: Reg-cited letter: Embedded Indian law references.

## 💡 Winning Touches

*   Integrate the organizers’ values (animal rights, transparency) into your pitch.
*   Reference AI usage explicitly (Electric Sheep loves that!).
*   Mention how this tool can empower **rural communities** or **NGOs** through storytelling.

## ✅ Success Criteria

*   ⚡ Generate objection in under 10 sec.
*   📄 Includes at least 1 cited law.
*   👤 Email alert or visual prompt triggers.
*   💡 Judges understand impact in <2 min.

## 🧨 Risk Mitigation

*   **LLM fails:** Have hardcoded templates as a fallback to ensure basic functionality.
*   **No email service:** Print to console (mock) to demonstrate email functionality.
*   **Legal complexity:** Focus on referencing only 2 key Indian laws for simplicity and accuracy within the hackathon timeframe.
